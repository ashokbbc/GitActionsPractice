name: Pull Request

on:
  push:
    branches:
      - 'master'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


env:
  INCREMENT: ((1400+${{github.run_number}}))
  MAXS: "-dev-"
  JOB_NAME: "Github-Actions"

jobs:
  Verify-Pull-Request:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # - run: sh "git rev-list origin/main --count"

      - name: run
        run: |
          echo "MAP=${{github.runerrt_id}}" >> $GITHUB_ENV
          echo $MAP

      - run: echo "NOP=$((${{github.run_number}} - 1))" >> $GITHUB_ENV
      - run: echo $NOP

      - name: Get Job Status
        id: get-job-status
        run: |
          API_URL="https://api.github.com/repos/ashokbbc/GitActionsPractice/actions/runs/$NOP"
          JOB_STATU=$(curl -s -H "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" $API_URL | jq -r '.workflow_run.jobs.YourJobName.conclusion')

          # Output the job status
          echo "Job Status: $JOB_STATU"
      - run: echo "MASERP=`git rev-list --count HEAD`" >>$GITHUB_ENV
      - run: echo "PRE_MSG=${{github.run_id}} "-dev."${{env.MASERPASD}}"most-"" >> $GITHUB_ENV
      - run: echo $PRE_MSGERT

      - run: echo "VIO=`curl X GET https://techvedham.com/wp-content/uploads/2023/09/verson.json | jq -r '.version'`" >> $GITHUB_ENV

      - name: Test
        run: |
          echo $VIO
          echo "BUILD_NUMBERS=$((${{github.run_number}} + 200))" >> $GITHUB_ENV
          echo "VERSN=`curl X GET https://techvedham.com/wp-content/uploads/2023/09/verson.json | jq -r '.version'`" >> $GITHUB_ENV
          echo "MASER=`git rev-list --count HEAD`" >>$GITHUB_ENV
          echo "PRE_RELEASE_NO=${{ env.MASER }}"-dev."${{env.BUILD_NUMBERS}}" >> $GITHUB_ENV

      - run: echo "MASERAS=`cat assets/release.txt`" >>$GITHUB_ENV

      - run: echo "MASERTY=`cat $GITHUB_WORKSPACE/CI/release.txt`" >>$GITHUB_ENV
      - name: Check last job status
        if: success()
        run: |
          LAST_JOB_STATUS=$(gh run list --workflow pull-request.yml | grep -oh "completed.*" | head -1 | awk '{print $2}')
          THIS_JOB_STATUS="${{ job.status }}"
          if [ "$LAST_JOB_STATUS" == "$THIS_JOB_STATUS" ]; then
            echo "STUP="Super"" >> $GITHUB_ENV
          fi
          echo $STP
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

          
      - run: echo $STUP
        
      # - run: sh "git rev-list origin/main --count"

      # - run: echo "PRE_RELEASE_NOS=${{ env.MASER }}"-dev."${{env.BUILD_NUMBERS}}" >> $GITHUB_ENV
          
      # - run: echo $VERSN
      # - run: echo $MASERAS
      # - run: echo $MASERTY
#      - run: bundle install
#      - name: Unit tests
#        run: bundle exec fastlane betaTest

#      - run: |
#          echo 'PACKAGE_JSON<<EOF' >> $GITHUB_ENV
#          cat ./app/version.txt >> $GITHUB_ENV
#          echo 'EOF' >> $GITHUB_ENV
#      - run: |
#          echo '${{ (env.PACKAGE_JSON).version }}'



#      - name: Read with Cat
#        id: subj
#        run: content=`cat ./app/version.txt`
#
#      - run: echo $content
#      - name: Read version.txt file
#        id: package
#        uses: juliangruber/read-file-action@v1
#        with:
#          path: ./app/version.txt
#      - name: Make version no
#        run: echo "GIT_RUN=${{ steps.package.outputs.content }}"-dev-"${{env.BUILd_no}}" >> $GITHUB_ENV
#
#      - run: echo "$GIT_RUN :rocket:"
#      - run: echo $GIT_RUN ":rocket:"

#      - name: merge
#        run: echo "Git_fix=`echo ${{GIT_RUN}}${{MAXS}}${{github.run_number}}`" >> $GITHUB_ENV
#
#      - run: echo $Git_fix
        
#      - name: "Get latest tag"
#        id: latest_tag
#        run: echo "name=$(git tag --sort=-creatordate | head -1)"
#      - name: "Get second latest tag"
#        id: second_latest_tag
#        run: echo "name=$(git tag --sort=-creatordate | head -2 | tail -1)"
#


          
#      - run: echo $GIT_MERGE

#       - name: release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
#         with:
#           tag_name: ${{ github.run_number }}
#           release_name: ${{ github.run_number }}

#      - name: Release to github
#        run: sh $GITHUB_WORKSPACE/release-to-github.sh
#        env:
#          ACCESS_TOKEN: ${{ secrets.GIT_TOKEN }}
#          REPO: "GitActionsPractice"
#          PRERELEASE: true
#          VERSION: "1.3.1"
        
#      - name: 'Get Previous tag'
#        id: previoustags
#        uses: "WyriHaximus/github-action-get-previous-tag@v1"
#        with:
#          fallback: 1.0.0
#
#      - name: 'Get Previous tag manually'
#        id: previoustagManually
#        run: |
#          echo "GIT_TAG_NO=  ${{ steps.previoustag.outputs.tag }}" >> $GITHUB_ENV
#          echo "Timestamp: ${{ steps.previoustag.outputs.timestamp }}"
#          test -n "${{ steps.previoustag.outputs.tag }}"
#          test -n "${{ steps.previoustag.outputs.timestamp }}"
#

#
#      - name: Get the version
#        id: get_version
#        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
#
#      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV
#
#      - name: Show GitHub ref
#        run: echo "$GITHUB_REF"
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: "Test Reports"
#          path: app/build/reports/tests/
#
